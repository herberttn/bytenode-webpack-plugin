import { dirname, relative, resolve } from 'path';

import replaceString from 'replace-string';
import type { Hook } from 'tapable';
import { Compilation, ExternalsPlugin } from 'webpack';
import type { Compiler, WebpackPluginInstance } from 'webpack';
import VirtualModulesPlugin from 'webpack-virtual-modules';

import { createLoaderCode } from './loaders';
import { compileSource, replaceSource } from './sources';
import type { Options, Prepared, PreparedEntries, PreparedEntry, Source } from './types';
import { createFileMatcher, fromTargetToCompiledExtension, isTargetExtension, normalizeCodePath, normalizeCodePathForUnix, normalizeCodePathForWindows, toLoaderFileName, toSiblingRelativeFileLocation } from './utils';

class BytenodeWebpackPlugin implements WebpackPluginInstance {

  private readonly name = 'BytenodeWebpackPlugin';
  private readonly options: Options;

  constructor(options: Partial<Options> = {}) {
    this.options = {
      compileAsModule: true,
      compileForElectron: false,
      debugLifecycle: false,
      keepSource: false,
      preventSourceMaps: true,
      ...options,
    };
  }

  apply(compiler: Compiler): void {
    const logger = compiler.getInfrastructureLogger(this.name);
    setupLifecycleLogging(compiler, this.name, this.options);

    logger.debug('original webpack.options.entry', compiler.options.entry);

    const { entries: { ignored, loaders, targets }, modules } = prepare(compiler);
    logger.debug('prepared ignores', Object.fromEntries(ignored.entries()));
    logger.debug('prepared loaders', Object.fromEntries(loaders.entries()));
    logger.debug('prepared targets', Object.fromEntries(targets.entries()));
    logger.debug('prepared modules', Object.fromEntries(modules.entries()));

    compiler.options.entry = Object.fromEntries([
      ...ignored.entries(),
      ...loaders.entries(),
      ...targets.entries(),
    ]);

    if (this.options.preventSourceMaps) {
      logger.log('Preventing source maps from being generated by changing webpack.options.devtool to false.');
      compiler.options.devtool = false;
    }

    if (this.options.compileForElectron) {
      const target = compiler.options.target;

      if (target) {
        const targets = Array.isArray(target) ? target : [target];

        if (!targets.some(target => target.startsWith('electron-'))) {
          logger.warn(`Consider using an electron target instead of or in addition to [${targets.join(', ')}] when compiling for electron.`);
        }
      }
    }

    logger.debug('modified webpack.options.devtool', compiler.options.devtool);
    logger.debug('modified webpack.options.entry', compiler.options.entry);

    logger.debug('adding electron as external');
    new ExternalsPlugin('commonjs', ['electron'])
      .apply(compiler);

    logger.debug('adding target imports from loader code as external');
    new ExternalsPlugin('commonjs', ({ context, contextInfo, request }, callback) => {
      if (context && contextInfo && request) {
        const requestLocation = resolve(context, request);

        if (contextInfo.issuer === toLoaderFileName(requestLocation)) {
          for (const target of Array.from(targets.values()).flatMap(target => target.import)) {
            const targetLocation = resolve(compiler.context, target);

            if (target === request || targetLocation === requestLocation) {
              logger.debug('external: context', { context, contextInfo, request, requestLocation, target, targetLocation });
              logger.debug('external: resolved to', target);

              return callback(undefined, target);
            }
          }
        }
      }

      return callback();
    }).apply(compiler);

    new VirtualModulesPlugin(Object.fromEntries(modules.entries()))
      .apply(compiler);

    // ensure hooks run last by tapping after the other plugins
    compiler.hooks.afterPlugins.tap(this.name, () => {
      logger.debug('hook: after plugins');
      const matches = createFileMatcher(this.options.include, this.options.exclude);

      compiler.hooks.compilation.tap(this.name, compilation => {
        logger.debug('hook: compilation');

        const stats = compilation.getLogger(this.name);
        const loaderOutputFiles: string[] = [];
        const targetOutputFiles: string[] = [];

        compilation.hooks.processAssets.tap({ name: this.name, stage: Compilation.PROCESS_ASSETS_STAGE_PRE_PROCESS }, (): void => {
          logger.debug('hook: process assets');
          stats.time('collect asset names');

          loaderOutputFiles.push(...collectOutputFiles(compilation, loaders));
          logger.debug('collected: loader output files', loaderOutputFiles);

          targetOutputFiles.push(...collectOutputFiles(compilation, targets));
          logger.debug('collected: target output files', targetOutputFiles);

          stats.timeEnd('collect asset names');
        });

        compilation.hooks.processAssets.tapPromise({ name: this.name, stage: Compilation.PROCESS_ASSETS_STAGE_DERIVED }, async (assets): Promise<void> => {
          logger.debug('hook: process assets promise');
          stats.time('process assets');

          for (const [name, asset] of Object.entries(assets)) {
            stats.group('asset', name);
            stats.time('took');

            if (loaderOutputFiles.includes(name)) {
              await updateLoaderToRequireCompiledAssets(compilation, name, asset);
            } else if (isTargetExtension(name) && matches(name)) {
              await updateTargetWithCompiledCode(compilation, name, asset, this.options);
            }

            stats.timeEnd('took');
            stats.groupEnd('asset', name);
          }

          stats.timeEnd('process assets');
        });

        async function updateLoaderToRequireCompiledAssets(compilation: Compilation, name: string, asset: Source): Promise<void> {
          logger.debug('updating loader to require compiled assets', { name });

          const source = await replaceSource(asset, raw => {
            logger.debug('initializing external target replacer');
            logger.debug({ outputPath: compiler.outputPath });

            for (let index = 0; index < targets.size; index++) {
              const target = Array.from(targets.values())[index];
              const fromLocation = loaderOutputFiles[index];
              const toLocation = targetOutputFiles[index];

              logger.debug('replacer', { name, target: { name: Array.from(targets.keys())[index], ...target }, fromLocation, toLocation });

              let to = relative(dirname(fromLocation), toLocation);

              if (!to.startsWith('.')) {
                to = toSiblingRelativeFileLocation(to);
              }

              // Use absolute path to load the compiled file in dev mode due to how electron-forge handles
              // the renderer process code loading (by using a server and not directly from the file system).
              // This should be safe exactly because it will only be used in dev mode, so the app code will
              // never be relocated after compiling with webpack and before starting electron.
              if (compiler.options.mode === 'development' && compiler.options.target === 'electron-renderer') {
                to = resolve(compiler.outputPath, toLocation);
              }

              for (const from of target.import) {
                raw = replaceImportPath(raw, name, from, to, {
                  permutations: [
                    normalizeCodePath,
                  ],
                });
              }
            }

            logger.debug('initializing compiled target replacer');

            for (const file of targetOutputFiles) {
              raw = replaceImportPath(raw, name, file, fromTargetToCompiledExtension(file), {
                permutations: [
                  normalizeCodePathForUnix,
                  normalizeCodePathForWindows,
                ],
              });
            }

            return raw;
          });

          compilation.updateAsset(name, source);

          function replaceImportPath(raw: string, name: string, from: string, to: string, options?: { permutations?: Array<(path: string) => string> }): string {
            const { permutations = [(identity: string): string => identity] } = options ?? {};

            for (const transform of permutations) {
              const fromTransformed = `${transform(from)}"`;
              const toTransformed = `${transform(to)}"`;

              logger.debug('replacing within', name);
              logger.debug('  from:', fromTransformed);
              logger.debug('    to:', toTransformed);

              raw = replaceString(raw, fromTransformed, toTransformed);
            }

            return raw;
          }
        }

      });
    });

    async function updateTargetWithCompiledCode(compilation: Compilation, name: string, asset: Source, options: Options): Promise<void> {
      logger.debug('compiling asset source', { name });
      const source = await compileSource(asset, options);

      logger.debug('updating asset source with the compiled content');
      compilation.updateAsset(name, source);

      const to = fromTargetToCompiledExtension(name);

      logger.debug(`renaming asset to ${to}`);
      compilation.renameAsset(name, to);

      if (options.keepSource) {
        logger.debug('re-emitting decompiled asset due to plugin.options.keepSource being true');
        compilation.emitAsset(name, asset);
      } else {
        logger.debug('NOT re-emitting decompiled asset due to plugin.options.keepSource being false');
      }
    }
  }
}

function collectOutputFiles(compilation: Compilation, from: PreparedEntry): string[] {
  const files = [];

  for (const name of from.keys()) {
    const entrypoint = compilation.entrypoints.get(name);

    if (entrypoint) {
      files.push(...entrypoint.chunks.flatMap(chunk => Array.from(chunk.files.values())));
    }
  }

  return files;
}

function prepare(compiler: Compiler): Prepared {
  const { entry, output } = compiler.options;

  if (typeof entry === 'function') {
    throw new Error('webpack.options.entry cannot be a function, use strings or objects');
  }

  if (typeof output.filename === 'string' && !/.*[[\]]+.*/.test(output.filename)) {
    throw new Error('webpack.options.output.filename cannot be static, use a dynamic one like [name].js');
  }

  const entries: PreparedEntries = {
    ignored: new Map(),
    loaders: new Map(),
    targets: new Map(),
  };

  const modules = new Map();

  for (const [name, descriptor] of Object.entries(entry)) {
    if (descriptor.filename) {
      throw new Error('webpack.options.entry.filename is not supported, use webpack.options.output.filename');
    }

    const imports = descriptor.import as string[];

    // adds a new entry with a .compiled suffix, pointing to the original imports, which will be compiled
    entries.targets.set(name + '.compiled', { ...descriptor, import: imports });

    // changes the original entry to use loader files, which will load the decompiler and the new compiled entries
    entries.loaders.set(name, { import: imports.map(file => toLoaderFileName(file)) });

    // generates virtual modules with the code of the loader files
    for (const file of imports) {
      const code = createLoaderCode({ imports: [toSiblingRelativeFileLocation(file)] });
      const location = toLoaderFileName(file);

      modules.set(location, code);
    }
  }

  return {
    entries,
    modules,
  };
}

function setupLifecycleLogging(compiler: Compiler, name: string, options: Options): void {
  if (!options.debugLifecycle) {
    return;
  }

  const logger = compiler.getInfrastructureLogger(`${name}/lifecycle`);
  setupHooksLogging(name, 'compiler', compiler.hooks as unknown as Record<string, Hook<any, any>>);

  compiler.hooks.compilation.tap(name, compilation => {
    setupHooksLogging(name, 'compilation', compilation.hooks as unknown as Record<string, Hook<any, any>>);
  });

  compiler.hooks.normalModuleFactory.tap(name, normalModuleFactory => {
    setupHooksLogging(name, 'normalModuleFactory', normalModuleFactory.hooks as unknown as Record<string, Hook<any, any>>);
  });

  function setupHooksLogging(pluginName: string, type: string, hooks: Record<string, Hook<any, any>>): void {
    const deprecatedHooks = [
      'additionalChunkAssets',
      'afterOptimizeChunkAssets',
      'normalModuleLoader',
      'optimizeChunkAssets',
    ];

    // avoid maximum call stack size exceeded
    const recursiveHooks = ['infrastructureLog', 'log'];

    for (const [name, hook] of Object.entries(hooks)) {
      try {
        if (deprecatedHooks.includes(name) || recursiveHooks.includes(name)) {
          return;
        }

        hook.tap(pluginName, () => {
          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
          logger.debug(`${type} hook ${name} (${arguments.length} arguments)`);
        });
      } catch (_) {
        // ignore when unable to tap
      }
    }
  }
}

export {
  BytenodeWebpackPlugin,
};
